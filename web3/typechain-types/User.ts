/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import type {
  BaseContract,
  BigNumberish,
  BytesLike,
  FunctionFragment,
  Result,
  Interface,
  AddressLike,
  ContractRunner,
  ContractMethod,
  Listener,
} from "ethers";
import type {
  TypedContractEvent,
  TypedDeferredTopicFilter,
  TypedEventLog,
  TypedListener,
  TypedContractMethod,
} from "./common";

export declare namespace User {
  export type UserDataStruct = {
    addr: AddressLike;
    profilePictureURI: string;
    politicianParty: string;
    name: string;
    politicianRole: string;
    role: BigNumberish;
    createdAt: BigNumberish;
    updatedAt: BigNumberish;
  };

  export type UserDataStructOutput = [
    addr: string,
    profilePictureURI: string,
    politicianParty: string,
    name: string,
    politicianRole: string,
    role: bigint,
    createdAt: bigint,
    updatedAt: bigint
  ] & {
    addr: string;
    profilePictureURI: string;
    politicianParty: string;
    name: string;
    politicianRole: string;
    role: bigint;
    createdAt: bigint;
    updatedAt: bigint;
  };
}

export interface UserInterface extends Interface {
  getFunction(
    nameOrSignature:
      | "createUser"
      | "getAll"
      | "getUser"
      | "updateUser"
      | "users"
  ): FunctionFragment;

  encodeFunctionData(
    functionFragment: "createUser",
    values: [string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "getAll", values?: undefined): string;
  encodeFunctionData(
    functionFragment: "getUser",
    values: [AddressLike]
  ): string;
  encodeFunctionData(
    functionFragment: "updateUser",
    values: [AddressLike, string, string, string, string, BigNumberish]
  ): string;
  encodeFunctionData(functionFragment: "users", values: [BigNumberish]): string;

  decodeFunctionResult(functionFragment: "createUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getAll", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "getUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "updateUser", data: BytesLike): Result;
  decodeFunctionResult(functionFragment: "users", data: BytesLike): Result;
}

export interface User extends BaseContract {
  connect(runner?: ContractRunner | null): User;
  waitForDeployment(): Promise<this>;

  interface: UserInterface;

  queryFilter<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;
  queryFilter<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined
  ): Promise<Array<TypedEventLog<TCEvent>>>;

  on<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  on<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  once<TCEvent extends TypedContractEvent>(
    event: TCEvent,
    listener: TypedListener<TCEvent>
  ): Promise<this>;
  once<TCEvent extends TypedContractEvent>(
    filter: TypedDeferredTopicFilter<TCEvent>,
    listener: TypedListener<TCEvent>
  ): Promise<this>;

  listeners<TCEvent extends TypedContractEvent>(
    event: TCEvent
  ): Promise<Array<TypedListener<TCEvent>>>;
  listeners(eventName?: string): Promise<Array<Listener>>;
  removeAllListeners<TCEvent extends TypedContractEvent>(
    event?: TCEvent
  ): Promise<this>;

  createUser: TypedContractMethod<
    [
      _profilePictureURI: string,
      _politicianParty: string,
      _name: string,
      _politicianRole: string,
      _role: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  getAll: TypedContractMethod<[], [User.UserDataStructOutput[]], "view">;

  getUser: TypedContractMethod<
    [_address: AddressLike],
    [User.UserDataStructOutput],
    "view"
  >;

  updateUser: TypedContractMethod<
    [
      _address: AddressLike,
      _profilePictureURI: string,
      _politicianParty: string,
      _name: string,
      _politicianRole: string,
      _role: BigNumberish
    ],
    [void],
    "nonpayable"
  >;

  users: TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, string, bigint, bigint, bigint] & {
        addr: string;
        profilePictureURI: string;
        politicianParty: string;
        name: string;
        politicianRole: string;
        role: bigint;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;

  getFunction<T extends ContractMethod = ContractMethod>(
    key: string | FunctionFragment
  ): T;

  getFunction(
    nameOrSignature: "createUser"
  ): TypedContractMethod<
    [
      _profilePictureURI: string,
      _politicianParty: string,
      _name: string,
      _politicianRole: string,
      _role: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "getAll"
  ): TypedContractMethod<[], [User.UserDataStructOutput[]], "view">;
  getFunction(
    nameOrSignature: "getUser"
  ): TypedContractMethod<
    [_address: AddressLike],
    [User.UserDataStructOutput],
    "view"
  >;
  getFunction(
    nameOrSignature: "updateUser"
  ): TypedContractMethod<
    [
      _address: AddressLike,
      _profilePictureURI: string,
      _politicianParty: string,
      _name: string,
      _politicianRole: string,
      _role: BigNumberish
    ],
    [void],
    "nonpayable"
  >;
  getFunction(
    nameOrSignature: "users"
  ): TypedContractMethod<
    [arg0: BigNumberish],
    [
      [string, string, string, string, string, bigint, bigint, bigint] & {
        addr: string;
        profilePictureURI: string;
        politicianParty: string;
        name: string;
        politicianRole: string;
        role: bigint;
        createdAt: bigint;
        updatedAt: bigint;
      }
    ],
    "view"
  >;

  filters: {};
}
